{"data":{"markdownRemark":{"html":"<h2>Contents</h2>\n<ol>\n<li><a href=\"#about\">Why would I need this?</a></li>\n<li><a href=\"#work\">How does it work?</a></li>\n<li><a href=\"#issues\">Are there any issues?</a></li>\n<li><a href=\"#run\">How do I run the demo?</a></li>\n<li><a href=\"#next\">What's next?</a></li>\n</ol>\n<span id=\"about\" />\n<h2>Why would I need this?</h2>\n<p>Traditionally, web links are created by using the &#x3C;a> element and\nassigning a location through href. In shiny, you would do something\nlike this:</p>\n<pre><code class=\"language-r\"># using tags\ntags$a(href=\"target_page\",\"Go to target page\")\n</code></pre>\n<p>However, this approach will not work as every time a shiny app is\nlaunched, the values for the href attribute in the &#x3C;a> element(s)\nare regenerated. This makes traditional hyperlink calls (as displayed\nabove) impossible. One way is to work with <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes\">data\nattributes</a>.</p>\n<p>In this example, I'll be using the page layout navbarPage and\ntabPanel. Let's take a look at tabPanel. As written on the\nshiny reference page for\n<a href=\"https://shiny.rstudio.com/reference/shiny/latest/tabPanel.html\">tabPanel</a>,\ntabPanel has the following arguments.</p>\n<pre><code class=\"language-r\"># tabPanel function\ntabPanel(title, ..., value=title, icon=NULL)\n</code></pre>\n<p>The argument title receives the name of the tab. By default, the\nargument value is assigned the value given to title. Using a\nlittle bit of javascript, we can create a custom function that receives\na user-defined destination and searches the information in value in\norder to find the tab with the matching destination.</p>\n<p>It's important to note that even though value receives the values\nfrom title by default, it is good practice to assign shorter names\nto value to avoid matching errors. For example:</p>\n<pre><code class=\"language-r\"># tabPanel function\ntabPanel(title=\"My super duper cool home page\", value=\"home\")\n</code></pre>\n<p>When shiny apps are launched, value is assigned the attribute\ndata-value. Using a little bit of javascript, we can use\ndata-value instead of href.</p>\n<span id=\"work\" />\n<h2>How does the app work?</h2>\n<h3>Create Javascript function</h3>\n<p>The following function loops through all the values in the data-value to\nlook for the desired tab (adapted code from this <a href=\"https://stackoverflow.com/questions/36412407/shiny-add-link-to-another-tabpanel-in-another-tabpanel\">SO\nquestion</a>).\nWhen a match is found, simulate a mouse click using click (this will\nadvance the screen to the desired tab).</p>\n<pre><code class=\"language-javascript\"># js file\nvar customHref = function(tabName) {\n        var dropdownList = document.getElementsByTagName( class=\"value\">\"a\");\n                for (var i = 0; i &#x3C; dropdownList.length; i++) {\n                var link = dropdownList[i];\n                if(link.getAttribute(\"data-value\") == tabName) {\n                        link.click();\n                }\n        }\n};\n</code></pre>\n<p>Using the home page we defined earlier, the custom link would look like\nthis:</p>\n<pre><code class=\"language-r\"># using tags with js function\ntags$a(\"onclick\"=\"customHref('home')\",\"Go to home page\")\n</code></pre>\n<p>What this is saying is: 1) find me all elements with data-values and\nreturn the values, 2) using the destination I defined, find a match in\nthose values, and 3) when a match is found, move to that tab.</p>\n<h3>Setup ui.R (or app.R) file</h3>\n<p>You can either place this at the top of the UI or store in a separate\nfile and load using includeScript or tags$script. In this\nexample, I placed the function in a separate file and reading it in\nusing tags$script(src=...).</p>\n<pre><code class=\"language-r\"># ui.R or app.R\nui &#x3C;- tagList(\n        # head\n        tags$head(\n                tags$script(src=\"func.js\")\n        ),\n\n        # ui\n        navbarPage(\n                ...\n        )\n)\n</code></pre>\n<h3>Create tabPanels and assign each one a unique value</h3>\n<p>Next, set up your tabs and give a unique name to the argument value.</p>\n<pre><code class=\"language-r\"># ui.R/app.R\nui &#x3C;- tagList(\n        # head\n        tags$head(\n                tags$script(src=\"func.js\")\n        ),\n\n        # ui\n        navbarPage(\n                tabPanel(\"tab 1\", value=\"tab1\"),\n                tabPanel(\"tab 2\", value=\"tab2\"),\n                tabPanel(\"tab 3\", value=\"tab3\")\n        )\n)   \n</code></pre>\n<h3>Define the links</h3>\n<p>In one or all the panels, make a custom link using tags$a(). We\nwill also setup a blank shiny server.</p>\n<pre><code class=\"language-r\"># ui.R/app.R\nui &#x3C;- tagList(\n        # head\n        tags$head(\n                tags$script(src=\"func.js\")\n        ),\n\n        # ui\n        navbarPage(\n                tabPanel(\"tab 1\", value=\"tab1\",\n                        tags$h1(\"Some Title\"),\n                        tags$a(\"onclick\"=\"customHref('tab2')\",\"Go to the second tab\")\n                ),\n                tabPanel(\"tab 2\", value=\"tab2\",\n                    tags$h1(\"Some Title\"),\n                    tags$a(\"onclick\"=\"customHref('tab3')\",\"Go to the third tab\")\n                ),\n                tabPanel(\"tab 3\", value=\"tab3\",\n                        tags$h1(\"Some Title\"),\n                        tags$a(\"onclick\"=\"customHref('tab1')\",\"Go to the first tab\")\n                )\n        )\n)\n\n# server\nserver &#x3C;- function(input,output){}\n</code></pre>\n<p>Now our app is ready to go. Launch the app and click on the links we\nsetup.</p>\n<span id=\"issues\" />\n<h2>Are there any issues?</h2>\n<p>Yes. If using bootstrap layouts, this does cause the navigation bar to\nremain open on smaller devices after a link is clicked. To my knowledge,\nthere isn't a solution for this for shiny users.</p>\n<span id=\"run\" />\n<h2>How can I run this app?</h2>\n<p>The source code is available on\n<a href=\"https://github.com/davidruvolo51/shinyAppTutorials/tree/master/Internal-Links-Basic-Ex\">github</a>{.eLinks}.\nAlternatively, you can run the demo in R using the following code.</p>\n<pre><code class=\"language-r\"># Run in R/Rstudio\ninstall.packages(\"shiny\")\nshiny::runGitHub(repo=\"shinyAppTutorials\",username=\"davidruvolo51\",subdir=\"Internal-Links-Basic-Ex\")\n</code></pre>\n<span id=\"next\" />\n<h2>What's next?</h2>\n<p>Check out <a href=\"../internal-links-b/\">part 2</a> of this series.</p>","frontmatter":{"title":"Linking Tabs - Part 1","subtitle":"Creating Links to Other Pages in a Shiny App","abstract":"Creating links to other pages in your shiny app can be challenging as ids are overwritten each time a shiny app launches. Instead, we will learn how to create new links using javascript.","date":"2018-03-05","keywords":["javascript"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/internal-links-a/"}}