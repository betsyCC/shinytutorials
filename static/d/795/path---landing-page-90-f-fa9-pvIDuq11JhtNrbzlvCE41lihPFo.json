{"data":{"markdownRemark":{"html":"<h2>Contents</h2>\n<ol>\n<li><a href=\"#about\">Why would I need this?</a></li>\n<li><a href=\"#work\">How does this work?</a></li>\n<li><a href=\"#run\">How do I run the demo?</a></li>\n</ol>\n<span id=\"run\" />\n<h2>Why would I need this?</h2>\n<p>Over on community.rstudio.com, there was <a href=\"https://community.rstudio.com/t/background-images-in-shiny/12261\">a question</a>\non placing content on top of four images arranged in a <code>2x2</code> layout. The purpose of this tutorial will describe how to\ndesign this page. </p>\n<p>Here's what we will create:</p>\n<p><img src=\"https://raw.githubusercontent.com/davidruvolo51/shinyAppTutorials/master/shiny_landing_page/preview.png\"></p>\n<blockquote>\n<p><strong>Note</strong><br>\nThis tutorial focuses on html and css. Some experience of html and css\nwill definitely help, but not required. I've tried to keep concepts\nas simple and reference outside sources where possible. If you have\nsuggestions for improvement or notice any errors, feel free to open a\nnew <a href=\"https://github.com/davidruvolo51/shinytutorials/issues\">issue</a>.</p>\n</blockquote>\n<span id=\"work\" />\n<h2>How does this work?</h2>\n<p>To achieve this design, we will nest two <strong>div</strong> elements (we will refer\nto them as <strong>children</strong>)in a master <strong>div</strong> (we will refer to this as\nthe <strong>parent</strong>). One child element will be used for the images and the\nother child will be used for the content (that to be placed over the\nimages). In shiny this would be written as:</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\"><span class=\"token comment\"># parent</span>\ntags<span class=\"token operator\">$</span>div<span class=\"token punctuation\">(</span>\n        <span class=\"token comment\"># children</span>\n        tags<span class=\"token operator\">$</span>div<span class=\"token punctuation\">(</span><span class=\"token ellipsis\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        tags<span class=\"token operator\">$</span>div<span class=\"token punctuation\">(</span><span class=\"token ellipsis\">...</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Using this structure, let's start by assign css classes.</p>\n<h3>Building the ui and setting css classes</h3>\n<p>The parent <strong>div</strong> will receive the css class <strong>landing-wrapper</strong> and\nthe child elements will recieve the css class <strong>landing-block</strong>. The\n<strong>div</strong> with images will also receive a css class of\n<strong>background-content</strong> and the <strong>div</strong> for the content to be placed on\ntop of the images will receive a second css class\n<strong>foreground-content</strong>.</p>\n<p>In our app, our ui will be written using html elements made available\nthrough <strong>tags$...()</strong>. We will also use an external css file to\narrange our content. Create a blank css file and place it in the <strong>www</strong>\ndirectory in your project. We will call it something generic like\n<strong>styles.css</strong>. Since we are creating a layout of two rows with two\nimages in each, we will load four images. Let's also add some generic\ntext for the <strong>foreground-content</strong>.</p>\n<p>In shiny, our ui would look like this.</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\"><span class=\"token comment\"># ui</span>\nui <span class=\"token operator\">&lt;-</span> tagList<span class=\"token punctuation\">(</span>\n        <span class=\"token comment\"># head</span>\n        tags<span class=\"token operator\">$</span>head<span class=\"token punctuation\">(</span>\n            tags<span class=\"token operator\">$</span>link<span class=\"token punctuation\">(</span>href<span class=\"token operator\">=</span><span class=\"token string\">\"styles.css\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token comment\"># parent</span>\n        tags<span class=\"token operator\">$</span>div<span class=\"token punctuation\">(</span>class<span class=\"token operator\">=</span><span class=\"token string\">\"landing-wrapper\"</span><span class=\"token punctuation\">,</span>\n\n                <span class=\"token comment\"># child: images</span>\n                tags<span class=\"token operator\">$</span>div<span class=\"token punctuation\">(</span>class<span class=\"token operator\">=</span><span class=\"token string\">\"landing-block background-content\"</span><span class=\"token punctuation\">,</span>\n                        tags<span class=\"token operator\">$</span>img<span class=\"token punctuation\">(</span>src<span class=\"token operator\">=</span><span class=\"token string\">\"path/to/img/img1.png, alt=\"</span>a description about this image\"<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        tags<span class=\"token operator\">$</span>img<span class=\"token punctuation\">(</span>src<span class=\"token operator\">=</span><span class=\"token string\">\"path/to/img/img2.png, alt=\"</span>a description about this image\"<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        tags<span class=\"token operator\">$</span>img<span class=\"token punctuation\">(</span>src<span class=\"token operator\">=</span><span class=\"token string\">\"path/to/img/img3.png, alt=\"</span>a description about this image\"<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        tags<span class=\"token operator\">$</span>img<span class=\"token punctuation\">(</span>src<span class=\"token operator\">=</span><span class=\"token string\">\"path/to/img/img4.png, alt=\"</span>a description about this image\"<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n                <span class=\"token comment\"># child: content</span>\n                tags<span class=\"token operator\">$</span>div<span class=\"token punctuation\">(</span>class<span class=\"token operator\">=</span><span class=\"token string\">\"landing-block foreground-content\"</span><span class=\"token punctuation\">,</span>\n                        tags<span class=\"token operator\">$</span>div<span class=\"token punctuation\">(</span>class<span class=\"token operator\">=</span><span class=\"token string\">\"foreground-text\"</span><span class=\"token punctuation\">,</span>\n                                tags<span class=\"token operator\">$</span>h1<span class=\"token punctuation\">(</span><span class=\"token string\">\"Title\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                tags<span class=\"token operator\">$</span>p<span class=\"token punctuation\">(</span><span class=\"token string\">\"some text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n\n        <span class=\"token punctuation\">)</span> <span class=\"token comment\"># end parent div</span>\n<span class=\"token punctuation\">)</span> <span class=\"token comment\"># end tagList</span></code></pre></div>\n<p>In the above code, I added one additional <strong>div</strong> in the child used for\nthe text. This is for extra control over the positioning of the content.\nThis will come in handy later on.</p>\n<p>It is good practice to set the <strong>alt</strong> attribute. This attribute will\ndisplay text when an image fails to load, but more importantly it is as\na description for individuals with visual impairments. Make sure if you\nare using images stored locally, these images need to be stored in the\n<strong>www</strong> directory.</p>\n<p>It's important to note that these css classes are for demonstration\npurposes only, you may want to use a naming system that makes sense for\nyou.</p>\n<h3>Defining the child elements</h3>\n<p>Now we can start applying to css properties to each class. Open up the\ncss file. You can use rstudio to edit the file or any other text editor.</p>\n<p>Let's start with the class <strong>landing-block</strong>. The purpose of\n<strong>landing-block</strong> is to apply the same styles to all children (the\n<strong>div</strong> that contains the images and the <strong>div</strong> that contains the\ntext). You can use this class to set the text color in each child to\nblue or make background green. For now, we will use this class to make\nsure the height and width of all children are the same.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.landing-block</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100vh<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Note:</strong> <strong>vh</strong> is a <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/length#Viewport-percentage_lengths\">Viewport Percentage\nLength</a>.\nEssentially, this allows you to set elements to the full height of the\nbrowser's viewable area.</p>\n<p>Next, we will stay applying properties to the class\n<strong>background-content</strong>.</p>\n<h3>Arranging the images</h3>\n<p>To get the 2-by-2 layout, we will use <a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\">css\ngrid</a>. CSS\ngrid is a browser native two dimensional layout system. This means that\nelements can be arranged by columns and rows. There are many powerful\nfeatures in grid (see link for more info) in this example we will\nspecify the desired number of columns using the property\n<strong>grid-template-columns</strong>. To use css grid, simply set the property\n<strong>display</strong> to <strong>grid</strong> to the class <strong>background-content</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.background-content</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> grid<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>How do we set the number of columns?</p>\n<p>The desired number of columns is defined by explicity setting the widths\nfor each column followed by a space. You can use fixed widths (e.g.,\n250px), but it's easier to use relative widths (e.g., 25%, 50%, 62.7%,\netc.) as these units will respond to browser widths and adjust\naccordingly if the user resizes the browser window.</p>\n<p>In our example, we want a 2x2 layout. Since we are using the relative\nwidths (i.e., %), the widths of our columns will be half of the total\nwidth (total possible width = 100%). Therefore, each column will have a\nwidth of 50%. This will written out as: <strong>50% 50%</strong>.</p>\n<p>Going back the our class <strong>background-content</strong>, let's add in the\ncolumns. The property for setting the columns is\n<strong>grid-template-columns</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.background-content</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> grid<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> 50% 50%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We could write this another way using the <strong>repeat</strong> function. The\nfunction repeat allows us to duplicate a value a given number of times.\nThe function looks like this <strong>repeat(n, value</strong>) where <strong>n</strong> equals the\nnumber of times to repeat the <strong>value</strong>. In our example, we could\nrewrite it as <strong>repeat(2, 50%)</strong>. This function is super handy if you\nhave several elements of the same width. You can also mix and match\n<strong>repeat</strong> with explict naming of columns: <strong>25% repeat(5, 10%) 25%</strong>.</p>\n<p>Before we move on to styling the foreground content, we will apply a\ncouple of properties to the images. We want to make sure the images fit\nwithin each \"cell\" in the <strong>background-content</strong>. By default, image do\nnot have default properties as a <strong>div</strong> and this can cause images to\nbehavior differently. To correct this, we will modify the display\nproperty to <strong>block</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.background-content img</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Why did it write this as <strong>.background-content img</strong>? This is known as a\n<strong>descendent combinator</strong>. A <strong>descendent combinator</strong> is a css selector\npath that allows us to apply styles to a elements that follow a similar\npath in the DOM. We could write this with <strong>img</strong> only, but all images\nin our app will be displayed to <strong>100%</strong>. This isn't ideal if we have\nlogos or other images that should have fixed widths. See <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors\">Mozilla.com -\ncss\nselectors</a>\nfor more information.</p>\n<p>At this point, we have our images arranged. Update the links with four\nimages of your choice and start up our app. What do you see?</p>\n<h3>Arranging the text</h3>\n<p>Now we will style the <strong>foreground-content</strong>.</p>\n<p>In the original post, the navbar page layout was used. In our css file,\nwe will need to account for the height of that navigation bar at the top\nof the page (skip this part if you are using are using the standard html\nlayout). We already set the height and width (see section 2) so now we\nneed to adjust the foreground position so it sits on top of the images.</p>\n<p>To do this we will set the <strong>position</strong> to <strong>absolute</strong>. This removes an\nelement from the document flow allowing the element to \"float\" on the\npage. We will set the property <strong>top</strong> (the <em>y</em> distance from the top of\nthe page) to <strong>10%</strong> (10% is roughly the height of the navigation bar;\nadjust as necessary).</p>\n<p>We will also need to make sure that our content stays on top of\neverything else. Setting the content's <strong>z-index</strong> to a high number\nallows us to do layer elements accordingly. The default <strong>z-index</strong> is 0\nby increasing the <strong>z-index</strong> we are allowing content to be layered on\ntop of other elements. We will set it to <strong>9999</strong>.</p>\n<p>Lastly, we will also use css <a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\">flexbox\nlayout</a> to\nalign items within their parent element (i.e., <strong>landing-wrapper</strong>). We\nwant the content to be aligned vertically and horizontally. The property\n<strong>justify-content</strong> allows us to align items horizontally and the\nproperty <strong>align-items</strong> allows us to align items vertically. In our\ncase, we will set both of properties to <strong>center</strong>.</p>\n<p>Here's what it looks like.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.foreground-content</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 10%<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* use \"top: 0;\" if you are using a standard html page */</span>\n  <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 9999<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the ui.R, we will add content to <strong>foreground-content</strong>. We will add\na title and short sentence, and then wrap the text in a new <strong>div</strong>. We\nwill also add in the image paths (make sure images are located in the\n<strong>www</strong> directory or have a valid url).</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\">ui <span class=\"token operator\">&lt;-</span> tagList<span class=\"token punctuation\">(</span>\n        <span class=\"token comment\"># head</span>\n        tags<span class=\"token operator\">$</span>head<span class=\"token punctuation\">(</span>\n            tags<span class=\"token operator\">$</span>link<span class=\"token punctuation\">(</span>href<span class=\"token operator\">=</span><span class=\"token string\">\"styles.css\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token comment\"># parent</span>\n        tags<span class=\"token operator\">$</span>div<span class=\"token punctuation\">(</span>class<span class=\"token operator\">=</span><span class=\"token string\">\"landing-wrapper\"</span><span class=\"token punctuation\">,</span>\n\n                <span class=\"token comment\"># child: images</span>\n                tags<span class=\"token operator\">$</span>div<span class=\"token punctuation\">(</span>class<span class=\"token operator\">=</span><span class=\"token string\">\"landing-block background-content\"</span><span class=\"token punctuation\">,</span>\n                        tags<span class=\"token operator\">$</span>img<span class=\"token punctuation\">(</span>src<span class=\"token operator\">=</span><span class=\"token string\">\"www/img1.png, alt=\"</span>a description about this image\"<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        tags<span class=\"token operator\">$</span>img<span class=\"token punctuation\">(</span>src<span class=\"token operator\">=</span><span class=\"token string\">\"www/img2.png, alt=\"</span>a description about this image\"<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        tags<span class=\"token operator\">$</span>img<span class=\"token punctuation\">(</span>src<span class=\"token operator\">=</span><span class=\"token string\">\"www/img3.png, alt=\"</span>a description about this image\"<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        tags<span class=\"token operator\">$</span>img<span class=\"token punctuation\">(</span>src<span class=\"token operator\">=</span><span class=\"token string\">\"www/img4.png, alt=\"</span>a description about this image\"<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n                <span class=\"token comment\"># child: content</span>\n                tags<span class=\"token operator\">$</span>div<span class=\"token punctuation\">(</span>class<span class=\"token operator\">=</span><span class=\"token string\">\"landing-block foreground-content\"</span><span class=\"token punctuation\">,</span>\n                        tags<span class=\"token operator\">$</span>div<span class=\"token punctuation\">(</span>class<span class=\"token operator\">=</span><span class=\"token string\">\"foreground-text\"</span><span class=\"token punctuation\">,</span>\n                                tags<span class=\"token operator\">$</span>h1<span class=\"token punctuation\">(</span><span class=\"token string\">\"Title\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                tags<span class=\"token operator\">$</span>p<span class=\"token punctuation\">(</span><span class=\"token string\">\"some text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span> <span class=\"token comment\"># end parent div</span>\n<span class=\"token punctuation\">)</span> <span class=\"token comment\"># end tagList</span></code></pre></div>\n<p>The flexbox attributes that we defined for the class\n<strong>foreground-content</strong> will push the element <strong>foreground-text</strong> to the\nmiddle of the page (vertically and horizontally).</p>\n<p>At this point, the <strong>foreground-text</strong> isn't anything to write home\nabout. It's black text on a series of images. We will add some basic\nstyles to make this element standout a bit. Let's make the background\ncolor white and add a bit of padding around the text. We will also add a\ndrop shadow to make content to appear on top of the images.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.foreground-content .foreground-text</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 7.5%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> black<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> 0 4px 6px 2px <span class=\"token function\">hsla</span><span class=\"token punctuation\">(</span>0, 0%, 0%, 0.18<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>That's it! Our app is ready to go. We have our images laid out and\nwe've placed some content on top. Enjoy!</p>\n<span id=\"run\" />\n<h2>How do I run the demo?</h2>\n<p>The source code is available on\n<a href=\"https://github.com/davidruvolo51/shinyAppTutorials/tree/master/shiny_landing_page\">github</a>.\nAlternatively, you can run the demo in R using the following code.</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\"><span class=\"token comment\"># Run in R/Rstudio</span>\ninstall.packages<span class=\"token punctuation\">(</span><span class=\"token string\">\"shiny\"</span><span class=\"token punctuation\">)</span>\nshiny<span class=\"token operator\">::</span>runGitHub<span class=\"token punctuation\">(</span>repo<span class=\"token operator\">=</span><span class=\"token string\">\"shinyAppTutorials\"</span><span class=\"token punctuation\">,</span>username<span class=\"token operator\">=</span><span class=\"token string\">\"davidruvolo51\"</span><span class=\"token punctuation\">,</span>subdir<span class=\"token operator\">=</span><span class=\"token string\">\"shiny_landing_page\"</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"Landing Page","subtitle":"Custom home pages in shiny","abstract":"Are you tired of the same start up pages? Learn how to create a cool landing page. This demo was inspired by a post on community.rstudio.com.","date":"2018-03-02","keywords":["css"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/landing-page/"}}