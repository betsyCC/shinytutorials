{"data":{"markdownRemark":{"html":"<h2>Contents</h2>\n<ol>\n<li><a href=\"#about\">Why would I need a login screen?</a></li>\n<li><a href=\"#work\">How does the login screen work?</a></li>\n<li><a href=\"#whatelse\">What else should I know before using this?</a></li>\n<li><a href=\"#run\">How do I run the demo?</a></li>\n</ol>\n<span id=\"about\" />\n<h2>Why would I need this?</h2>\n<p>You probably do not need and you should use other well-defined methods\nthan this one. The professional shinyapps.io account has a privacy\nsettings that allows you to make apps private, but it does require a\nsubscription. If you wanted to create an 'protected' shiny app this\ncould be a potential solution that was inspired by a few SO posts. If\nyou setting up your own shiny server, there are tutorials and guides\navailable for protecting your applications using better methods.</p>\n<span id=\"work\" />\n<h2>How does the app work?</h2>\n<p>The way to visualize the UI structure is that there are three different\n'screens': 1) login, 2) standard user UI, and 3) admin UI. When the\nuser logs in, the username/password input is matched to the user account\ndataset. If the credentials do not match, then an error message is\ndisplayed. If successful, the credentials are matched to the\ncorresponding account type (standard or admin), which renders the\ncorresponding UI.</p>\n<h3>Create a single line ui.R file.</h3>\n<p>This shiny app works by rending the UI on the server side on successful\nlogin. The ui.R file looks like this.</p>\n<pre><code class=\"language-r\">ui &#x3C;- uiOutput(\"page\")\n</code></pre>\n<h3>Build the base <strong>ui1()</strong></h3>\n<p>The base ui <strong>ui1()</strong> contains the structure and the styling for the\nlogin screen. The login screen will have a short greeting and text\ninputs for username and password. The function, <strong>good_time</strong> returns a\ntime of day greeting (e.g., 'good morning' or 'good evening'; see R\nfile). Beneath the input box, we will also create a <strong>uiOutput</strong> for the\nerror message, which is described in the next step.</p>\n<pre><code class=\"language-r\"># set ui1\nui1 &#x3C;- function(){\n        tagList(\n                div(id=\"container\",\n                        div(id = \"login\",\n\n                                # make login panel\n                                wellPanel(id=\"well\",\n                                        HTML(paste0('&#x3C;h2>Hello, ', good_time(),'&#x3C;/h2>&#x3C;br>&#x3C;h3>Sign in to your account.&#x3C;/h3>')),\n                                        br(),\n                                        textInput(\"userName\",\"Username\"),\n                                        passwordInput(\"passwd\", \"Password\"),\n\n                                        # button\n                                        actionButton(\"Login\",\"Log in\")\n                                ),\n\n                                # login error message\n                                uiOutput(\"message\")\n                        )\n                ),\n\n                # css here\n                ...\n        )\n}\n</code></pre>\n<h3>Define the user accounts</h3>\n<p>Create an object with allowed usernames and passwords. You can use email\naddresses if that's easier and also assign initial passwords. You can\nalso generate random character strings using the\n<strong>stri_rand_strings()</strong> function from the <strong>stringi</strong> package.</p>\n<pre><code class=\"language-r\"># example accounts\n| type     | Username       | password      |\n---------------------------------------------\n| standard | brooke7901     |  somePassword |\n| admin    | shirley2131    |  somePassword |\n| admin    | lindsey5876    |  somePassword |\n\n# Build data.frame of user accounts\nusers &#x3C;- data.frame(\n        \"User\"=c(\"brooke7901\",\"shirley2131\",\"lindsey5876\"),\n        \"Password\"=c(\"somePassword\",\"somePassword\",\"somePassword\"),\n        stringsAsFactors=FALSE\n)\n</code></pre>\n<p>Make sure the user account information are stored separately and kept\nsecure. It would best to consult someone who is familiar with security\nif you were planning to host on the web (Ideally, you would want to use\na well defined tool).</p>\n<h3>Create an object that will handle the login status</h3>\n<p>Over on the shiny server code, let's create an object that will handle\nthe user login status (i.e., is the user logged in? yes or no?). Outside\nthe server code, we create the object <strong>Logged</strong> and set it to <strong>FALSE</strong>\n(where <strong>FALSE</strong> means not logged in).</p>\n<pre><code class=\"language-r\"># login status\nLogged = FALSE\n</code></pre>\n<p>We also place this into a <strong>reactiveValue</strong> object.</p>\n<pre><code class=\"language-r\"># reactive values for login status\nUSER &#x3C;- reactiveValues(Logged = Logged)\n</code></pre>\n<h3>Set Login Screen ObserveEvent</h3>\n<p>There is one <strong>observeEvent</strong> that checks the user inputs. This event is\ntriggered when the login button is clicked.</p>\n<p>In the first block (# render error message), the user input is checked\nagainst the list registered users. If the credentials supplied does not\nmatch any of the existing accounts, then it displays an error message.\nThe input data is matched with existing accounts by using <strong>grep</strong> to\nscan through the data for matching username and password, and then\nreturns the length of the data. The return value is numeric and can only\nhave the values of 0 or 1 where 0 equals no match and 1 equals a\nsucessful match. Both username and password have to return a value of 1\nin order to move on.</p>\n<p>The second block (#check input) uses the same method except that when\ncredentials are successfully matched, it sets the object <strong>Logged</strong> to\nTRUE. <strong>Logged</strong> is the current status of user where <strong>TRUE</strong> equals\nlogged in and <strong>FALSE</strong> equals logged out.</p>\n<pre><code class=\"language-r\"># On login btn click\nobserveEvent(input$Login,{\n\n        # render error message\n        output$message &#x3C;- renderUI({\n                if(!is.null(input$Login)){\n                        my_username &#x3C;- length(users$User[grep(pattern = input$userName, x = users$User)])\n                        my_password &#x3C;- length(users$User[grep(pattern = input$passwd, x = users$Password)])\n                        if(input$Login > 0){\n                                if(my_username &#x3C; 1 ||  my_password &#x3C; 1){\n                                        HTML(&#x3C;div id='error-box'>Sorry, that's not the right username or password. Please, try again. &#x3C;/div>\")\n                                }\n                        }\n                }\n        })\n\n        # CHECK INPUT\n        if(USER$Logged == FALSE) {\n                if(!is.null(input$Login)) {\n                        if(input$Login > 0) {\n                            Username &#x3C;- isolate(input$userName)\n                            Password &#x3C;- isolate(input$passwd)\n                            Id.username &#x3C;- which(users$User == Username)\n                            Id.password &#x3C;- which(users$Password == Password)\n                                if(length(Id.username) > 0 &#x26; length(Id.password) > 0) {\n                                        if(Id.username %in% Id.password) {\n                                                USER$Logged &#x3C;- TRUE\n                                        }\n                                }\n                        }\n                }\n        }\n})\n</code></pre>\n<h3>Rendering the UI When Logged = TRUE</h3>\n<p>Rendering the UI is fairly straightforward at this point and can be\ntriggered by a conditional statement. The following code demonstrates\nhow the object <strong>logged</strong> (as defined in the previous steps) is used to\nrender the UI.</p>\n<p>If the value of <strong>logged</strong> == <strong>FALSE</strong>, then render the UI object\n<strong>ui1</strong> that was defined in step 2. Since the initial value of\n<strong>logged</strong> is <strong>FALSE</strong>, the login ui will render by default (e.g., on\napp load).</p>\n<pre><code class=\"language-r\"># render ui based on admin rights\nobserve({\n        # when logged = FALSE\n        if (USER$Logged == FALSE) {\n                    output$page &#x3C;- renderUI({\n                        div(class=\"outer\",do.call(bootstrapPage,c(\"\",ui1())))\n                })\n        }\n\n        # Render UI by user type when logged = TRUE\n        if(USER$Logged == TRUE){\n                \n                # get the current user's authorization level\n                user_log &#x3C;- toupper(input$userName)\n                    \n                # if admin\n                if(user_log == \"ADMIN\"){\n                        output$page &#x3C;- renderUI({\n                                fluidPage(\n                                        ...\n                                )\n                        })\n                }\n\n                # if standard user\n                else{\n                        output$page &#x3C;- renderUI({\n                                    fluidPage(\n                                            ...\n                                    )\n                        })\n                }\n        }\n})\n</code></pre>\n<p>Setting admin rights is optional. If you do not want it, restructure the\n<strong>logged = TRUE</strong> section as written below.</p>\n<pre><code class=\"language-r\"># render ui without admin rights\nobserve({\n        \n        # when logged = FALSE\n        if (USER$Logged == FALSE) {\n                output$page &#x3C;- renderUI({\n                        div(class=\"outer\",do.call(bootstrapPage,c(\"\",ui1())))\n                })\n        } \n\n        # Render UI by user type when logged = TRUE\n        if(USER$Logged == TRUE){\n                output$page &#x3C;- renderUI({\n                        fluidPage(\n                                ...\n                        )\n                })\n        }\n})\n</code></pre>\n<p>You may replace <strong>fluidPage</strong> with any type of shiny ui layout (e.g.,\n<strong>sidebarLayout</strong>, <strong>tabsetPanel</strong>, etc.). See\n<a href=\"https://shiny.rstudio.com/articles/layout-guide.html\">shiny.rstudio.com/articles/layout-guide.html</a>\nfor more information.</p>\n<span id=\"whatelse\">\n<h2>Thoughts</h2>\n<p>I've used this method to create a project management tool to manage\ndaily activities and tasks. It was hosted on department servers and I\nadded this login screen only those with an account could view it. In the\nlive app, the account data was stored separately. I don't see much use\nfor it elsewhere and it was a pain to setup. The server side can get\nmessy pretty quickly, and we haven't added any code to build charts or\nother elements. I wouldn't really use this if you have sensitive\ninformation you'd like to protect.</p>\n<p>Alternatively, you can use the shiny package\n<a href=\"https://paul.rbind.io/2018/11/04/introducing-shinyauthr/\">shinyauthr</a>.</p>\n<span id=\"run\" />\n<h2>How can I run this app?</h2>\n<p>The source code is available on\n<a href=\"https://github.com/davidruvolo51/shinyAppTutorials/tree/master/Login-Screen\">github</a>.\nAlternatively, you can run the demo in R using the following code. Use\none of the following accounts to login.</p>\n<pre><code class=\"language-r\"># Run in R/Rstudio\ninstall.packages(\"shiny\")\nshiny::runGitHub(repo=\"shinyAppTutorials\", username=\"davidruvolo51\", subdir=\"Login-Screen\")\n\n# sample accounts\n| type     | Username | password |\n----------------------------------\n| standard | user     | password |\n| standard | test     | test     |\n| admin    | admin    | admin    |\n</code></pre>","frontmatter":{"title":"Login Screen","subtitle":"Building a Simple Password Protected Shiny App","abstract":"In my app, I want to set up some sort of user authentication where certain groups can see some pages and some groups can see all pages. Can I do this in shiny? Yes! Here's how to do it.","date":"2018-03-01","keywords":["access-control"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/login-screen/"}}